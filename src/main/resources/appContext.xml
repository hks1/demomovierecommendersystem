<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans.xsd
                     http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context.xsd">

<!-- XML Configuration with JAVA Annotations -->
<!--  enable component scan -->
<!-- 
<context:component-scan base-package="com.example.spring.basics.demomovierecommendersystem.lesson14"/>
 -->
<!-- Spring will scan everything marked with @Component as well as the @Controller, @Repository, and @Service annotations. -->

<!--  enable detection of dependency injection annotations -->
<context:annotation-config/>
<!-- 
Like the <context:component-scan> tag, the <context:annotation-config> tag can also detect dependency injection annotations, e.g., @Autowired and @Qualifier. But it cannot detect beans annotated with @Component and other stereotype annotations.

If we are using the <context:annotation-config> tag, then we need to declare beans in the XML config file.
 -->


<!--  bean definitions -->
<!-- ContentBasedFilter and CollaborativeFilter will use @Component annotation -->
<!--  to be uncommented for <context:annotation-config> tag -->
<bean id="contentBasedFilter" 
class="com.example.spring.basics.demomovierecommendersystem.lesson14.ContentBasedFilter">
</bean>

<bean id="collaborativeFilter" 
class="com.example.spring.basics.demomovierecommendersystem.lesson14.CollaborativeFilter">
</bean>

<bean id="recommenderImpl" 
class="com.example.spring.basics.demomovierecommendersystem.lesson14.RecommenderImplementation">
<!-- Dependency Injection using property tag -->
<!-- <property name="filter" ref="collaborativeFilter" /> -->
<!-- dependency injection - using constructor injection -->
<!-- <constructor-arg ref="collaborativeFilter" />  -->
</bean>


</beans>

<!-- 
The IOC container will read the appContext.xml file and create objects of the classes mentioned in it. It will call the constructor of the class to create the object by giving it the name that we specified as the id. Hence, the following line:

<bean id="contentBasedFilter" 
class="io.datajek.spring.basics.movierecommendersystem.lesson14.ContentBasedFilter">   
</bean >   
translates to:

ContentBasedFilter contentBasedFiler = new ContentBasedFilter();
 -->